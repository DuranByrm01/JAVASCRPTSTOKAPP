<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../partials/meta") %>
    <title>ÜRÜN KAYIT</title>
</head>

<body>
  <%- include("../partials/nav") %>
    <!-- //////////////////////////////////////////////////////////////////////////////////////// -->
      

    <!-- //////////////////////////////////////////////////////////////////////////////////////// -->
    <main class="container-md mt-5 bg-warning p-5">
      <form class="getForm" action="/urunler/get" method="GET">
        <!-- Ürün Seçimi -->
        <div class="col-auto mb-3 urnForm">
          <!-- Dinamik olarak doldurulacak -->
        </div>
    
        <!-- Malzeme Seçimi -->
        <div class="col-auto mb-3 malzemeForm">
          <!-- Dinamik olarak doldurulacak -->
        </div>
        <p id="urunSTok">Hesaplanıyor...</p>
        <!-- Miktar Girişi -->
        <label>Miktar: </label>
        <input id="stokMiktar" type="number" name="amount" required>
    
        <!-- İşlem Butonları -->
        <button id="urunStokGir" class="btn btn-primary urunGır" type="submit">ÜRÜN GİR</button>
        <button class="btn btn-danger urunCık" type="submit">ÜRÜN ÇIK</button>
      </form>
    </main>
    
    <script>
      // Ürünleri ve malzemeleri getirmek için kullanılan fonksiyonlar
      document.addEventListener("DOMContentLoaded", async () => {
        await fetchProducts(); // Ürün listesini yükle
      });
    
      async function fetchProducts() {
        try {
          const response = await fetch("/urunler/get");
          const products = await response.json();
    
          const urnForm = document.querySelector(".urnForm");
          let selectHTML = `
            <label for="productSelect">Ürün Seç</label>
            <select class="form-select" id="productSelect">
            <option selected value="">ÜRÜN SEÇ...</option>`;
    
          products.forEach(product => {
            selectHTML += `<option value="${product.urun_key}">${product.urun_Name}</option>`;
          });
    
          selectHTML += `</select>`;
          urnForm.innerHTML = selectHTML;
    
          // Ürün seçiminde malzemeleri yükleme işlemini bağla
          document.getElementById("productSelect").addEventListener("change", async (event) => {
            const selectedProductId = event.target.value;
            if (selectedProductId) {
              await fetchMaterials(selectedProductId);
            } else {
              document.querySelector(".malzemeForm").innerHTML = ""; // Malzemeleri temizle
            }
          });
        } catch (error) {
          console.error("Ürünleri getirme hatası:", error);
        }
      }
    
      async function fetchMaterials(productId) {
        try {
          const response = await fetch(`/urunler/malzeme/get/${productId}`);
          const materials = await response.json();
          const stokUrunMiktar = document.querySelector("#urunSTok");
          const malzemeForm = document.querySelector(".malzemeForm");
          let selectHTML = `
            <label for="materialSelect">Malzeme Seç</label>
            <select class="form-select" id="materialSelect">
              <option selected value="">MALZEME SEÇ...</option>
          `;
          
          materials.forEach(material => {
            selectHTML += `<option value="${material.urun_malzeme_PK}">${material.urun_malzeme_adi} </option>`;
            
          });

          

         
    
          selectHTML += `</select>`;
          malzemeForm.innerHTML = selectHTML;
        } catch (error) {
          console.error("Malzemeleri getirme hatası:", error);
        }
        
      }

      const urunStokGırButon = document.querySelector("#urunStokGir");
      const urunMiktar = document.querySelector("#stokMiktar");

      urunStokGırButon.addEventListener("click", async (event) => {
        event.preventDefault(); // Formun varsayılan davranışını durdur

        const productSelect = document.getElementById("productSelect");
        const materialSelect = document.getElementById("materialSelect");
        const urunMiktarValue = urunMiktar.value;

        if (!productSelect.value || !materialSelect.value || !urunMiktarValue) {
          alert("Lütfen tüm alanları doldurun.");
          return;
        }

        
        // Seçili ürün ve malzeme adlarını almak
        const productId = productSelect.value;
        const productName = productSelect.options[productSelect.selectedIndex].text; // Seçilen ürünün adı
        const materialId = materialSelect.value;
        const materialName = materialSelect.options[materialSelect.selectedIndex].text; // Seçilen malzemenin adı
        
        
        try {
          const response = await fetch("/urunler/stok/ekle", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              productName, // Ürün adı
              materialName, // Malzeme adı
              amount: parseInt(urunMiktarValue)
            })
          });

        } catch (error) {
          alert("Bir hata oluştu, lütfen tekrar deneyin.");
        }
      });



    </script>




<!-- ///////////////////////////////////////////////////////////////////////// -->

    <script>

const express = require("express");
const router = express.Router();

const db = require("../data/db"); 

router.get('/siparisList/trc60', async function (req, res) {
    
    try {
        
        const [trc60] = await db.execute("SELECT * FROM trc60");
        res.json(trc60);

        

        
    } catch (error) {
        console.log(error);
        res.status(500).send("Veritabanı hatası");
    }



})

router.get('/lowStock/get', async function (req, res) {

    try {
        const [lowStock] = await db.execute(
          "SELECT urun_malzeme_adi, urun_malzeme_adet FROM urunmalzemeleri WHERE urun_malzeme_adet < 1000 ORDER BY urun_malzeme_adet ASC;"
        );
        res.json(lowStock);  // Malzeme miktarı 1000'in altında olan tüm kayıtları gönder
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Veritabanı hatası oluştu.' });
    }

});

router.get('/urunler/get', async function (req, res) {

    try {
        const [urnList] = await db.execute( "SELECT urun_key, urun_Name FROM urunler;");

        res.json(urnList); 
        
    } catch (error) {

        console.error(error);
        res.status(500).json({ message: 'Veritabanı hatası oluştu.' });
    }

});

router.get('/urunler/malzeme/get/:urun_malzeme_PK', async function (req, res) {

    try {
        const [urunMalzeme] = await db.execute("SELECT * FROM urunmalzemeleri WHERE urun_malzeme_PK = ?", [req.params.urun_malzeme_PK]);

        res.json(urunMalzeme); 
        
    } catch (error) {

        console.error(error);
        res.status(500).json({ message: 'Veritabanı hatası oluştu.' });
    }

});



////////////////////////////////////////////////////////////////////////////////////////////////

router.post('/urunler/stok/ekle', async (req, res) => {
    const { productName, materialName, amount } = req.body;
  
    console.log("Gönderilen Veriler:", req.body);
  
    
});
  
  




  
  

//////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = router;




    </script>








    
</body>

</html>